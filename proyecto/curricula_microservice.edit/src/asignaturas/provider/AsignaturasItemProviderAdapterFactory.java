/**
 */
package asignaturas.provider;

import asignaturas.util.AsignaturasAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class AsignaturasItemProviderAdapterFactory extends AsignaturasAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AsignaturasItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link asignaturas.Root} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RootItemProvider rootItemProvider;

	/**
	 * This creates an adapter for a {@link asignaturas.Root}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRootAdapter() {
		if (rootItemProvider == null) {
			rootItemProvider = new RootItemProvider(this);
		}

		return rootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link asignaturas.Career} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CareerItemProvider careerItemProvider;

	/**
	 * This creates an adapter for a {@link asignaturas.Career}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCareerAdapter() {
		if (careerItemProvider == null) {
			careerItemProvider = new CareerItemProvider(this);
		}

		return careerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link asignaturas.CreditsPlan} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreditsPlanItemProvider creditsPlanItemProvider;

	/**
	 * This creates an adapter for a {@link asignaturas.CreditsPlan}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreditsPlanAdapter() {
		if (creditsPlanItemProvider == null) {
			creditsPlanItemProvider = new CreditsPlanItemProvider(this);
		}

		return creditsPlanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link asignaturas.Faculty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FacultyItemProvider facultyItemProvider;

	/**
	 * This creates an adapter for a {@link asignaturas.Faculty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFacultyAdapter() {
		if (facultyItemProvider == null) {
			facultyItemProvider = new FacultyItemProvider(this);
		}

		return facultyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link asignaturas.Subject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubjectItemProvider subjectItemProvider;

	/**
	 * This creates an adapter for a {@link asignaturas.Subject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubjectAdapter() {
		if (subjectItemProvider == null) {
			subjectItemProvider = new SubjectItemProvider(this);
		}

		return subjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link asignaturas.CurricularUnit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CurricularUnitItemProvider curricularUnitItemProvider;

	/**
	 * This creates an adapter for a {@link asignaturas.CurricularUnit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCurricularUnitAdapter() {
		if (curricularUnitItemProvider == null) {
			curricularUnitItemProvider = new CurricularUnitItemProvider(this);
		}

		return curricularUnitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link asignaturas.SomeOf} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SomeOfItemProvider someOfItemProvider;

	/**
	 * This creates an adapter for a {@link asignaturas.SomeOf}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSomeOfAdapter() {
		if (someOfItemProvider == null) {
			someOfItemProvider = new SomeOfItemProvider(this);
		}

		return someOfItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link asignaturas.NOT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NOTItemProvider notItemProvider;

	/**
	 * This creates an adapter for a {@link asignaturas.NOT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNOTAdapter() {
		if (notItemProvider == null) {
			notItemProvider = new NOTItemProvider(this);
		}

		return notItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link asignaturas.Coursed} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CoursedItemProvider coursedItemProvider;

	/**
	 * This creates an adapter for a {@link asignaturas.Coursed}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCoursedAdapter() {
		if (coursedItemProvider == null) {
			coursedItemProvider = new CoursedItemProvider(this);
		}

		return coursedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link asignaturas.Exam} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExamItemProvider examItemProvider;

	/**
	 * This creates an adapter for a {@link asignaturas.Exam}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExamAdapter() {
		if (examItemProvider == null) {
			examItemProvider = new ExamItemProvider(this);
		}

		return examItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link asignaturas.CreditsOnPlan} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreditsOnPlanItemProvider creditsOnPlanItemProvider;

	/**
	 * This creates an adapter for a {@link asignaturas.CreditsOnPlan}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreditsOnPlanAdapter() {
		if (creditsOnPlanItemProvider == null) {
			creditsOnPlanItemProvider = new CreditsOnPlanItemProvider(this);
		}

		return creditsOnPlanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link asignaturas.CreditsOnSubject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreditsOnSubjectItemProvider creditsOnSubjectItemProvider;

	/**
	 * This creates an adapter for a {@link asignaturas.CreditsOnSubject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreditsOnSubjectAdapter() {
		if (creditsOnSubjectItemProvider == null) {
			creditsOnSubjectItemProvider = new CreditsOnSubjectItemProvider(this);
		}

		return creditsOnSubjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link asignaturas.SubjectPlan} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubjectPlanItemProvider subjectPlanItemProvider;

	/**
	 * This creates an adapter for a {@link asignaturas.SubjectPlan}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubjectPlanAdapter() {
		if (subjectPlanItemProvider == null) {
			subjectPlanItemProvider = new SubjectPlanItemProvider(this);
		}

		return subjectPlanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link asignaturas.RegisteredTo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RegisteredToItemProvider registeredToItemProvider;

	/**
	 * This creates an adapter for a {@link asignaturas.RegisteredTo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRegisteredToAdapter() {
		if (registeredToItemProvider == null) {
			registeredToItemProvider = new RegisteredToItemProvider(this);
		}

		return registeredToItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link asignaturas.Course} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CourseItemProvider courseItemProvider;

	/**
	 * This creates an adapter for a {@link asignaturas.Course}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCourseAdapter() {
		if (courseItemProvider == null) {
			courseItemProvider = new CourseItemProvider(this);
		}

		return courseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link asignaturas.ExamEvaluation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExamEvaluationItemProvider examEvaluationItemProvider;

	/**
	 * This creates an adapter for a {@link asignaturas.ExamEvaluation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExamEvaluationAdapter() {
		if (examEvaluationItemProvider == null) {
			examEvaluationItemProvider = new ExamEvaluationItemProvider(this);
		}

		return examEvaluationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link asignaturas.EvaluacionExamen} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EvaluacionExamenItemProvider evaluacionExamenItemProvider;

	/**
	 * This creates an adapter for a {@link asignaturas.EvaluacionExamen}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEvaluacionExamenAdapter() {
		if (evaluacionExamenItemProvider == null) {
			evaluacionExamenItemProvider = new EvaluacionExamenItemProvider(this);
		}

		return evaluacionExamenItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link asignaturas.CourseEvaluation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CourseEvaluationItemProvider courseEvaluationItemProvider;

	/**
	 * This creates an adapter for a {@link asignaturas.CourseEvaluation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCourseEvaluationAdapter() {
		if (courseEvaluationItemProvider == null) {
			courseEvaluationItemProvider = new CourseEvaluationItemProvider(this);
		}

		return courseEvaluationItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (rootItemProvider != null) rootItemProvider.dispose();
		if (careerItemProvider != null) careerItemProvider.dispose();
		if (creditsPlanItemProvider != null) creditsPlanItemProvider.dispose();
		if (facultyItemProvider != null) facultyItemProvider.dispose();
		if (subjectItemProvider != null) subjectItemProvider.dispose();
		if (curricularUnitItemProvider != null) curricularUnitItemProvider.dispose();
		if (someOfItemProvider != null) someOfItemProvider.dispose();
		if (notItemProvider != null) notItemProvider.dispose();
		if (coursedItemProvider != null) coursedItemProvider.dispose();
		if (examItemProvider != null) examItemProvider.dispose();
		if (creditsOnPlanItemProvider != null) creditsOnPlanItemProvider.dispose();
		if (creditsOnSubjectItemProvider != null) creditsOnSubjectItemProvider.dispose();
		if (subjectPlanItemProvider != null) subjectPlanItemProvider.dispose();
		if (registeredToItemProvider != null) registeredToItemProvider.dispose();
		if (courseItemProvider != null) courseItemProvider.dispose();
		if (examEvaluationItemProvider != null) examEvaluationItemProvider.dispose();
		if (evaluacionExamenItemProvider != null) evaluacionExamenItemProvider.dispose();
		if (courseEvaluationItemProvider != null) courseEvaluationItemProvider.dispose();
	}

}
