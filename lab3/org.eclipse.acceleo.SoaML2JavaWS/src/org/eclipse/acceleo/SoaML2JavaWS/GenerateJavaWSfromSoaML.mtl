[comment encoding = UTF-8 /]
[module GenerateJavaWSfromSoaML('http://www.example.org/SoaML')/]

[query public parse (origin : String) : String =
	origin.replaceAll('á', 'a').replaceAll('é', 'e').replaceAll('í', 'i').replaceAll('ó', 'o').replaceAll('ú', 'u').replaceAll(' ', '')
/]

[template public generar_java(s : Model)]

Hay que hacer todo dentro del for de participante, a su vez en el for de puerto va la interfaz, de la interfaz se saca las operation, y de ahi los parametros con su messagetype

[comment @main /]
[for (p : Participant | s.participant)]
[for (pp : Port | p.port)]
[file(parse(p.name)+'/'+parse(pp.name)+'.java',false)]
package modelo.[parse(p.name)/];
import javax.jws.WebMethod;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.jws.soap.SOAPBinding.Style;

public class [parse(pp.name)/] {
} [comment va pal otro archivo/]

[for (i : Interface | pp.interface)]
@WebMethod
@SOAPBinding(style = Style.RPC)
public interface [parse(i.name)/] {

[for (o : Operation | i.operation)]
	@WebMethod
	String [parse(o.name)/]([for (ppp : Parameter | o.parameter)][if (ppp.direction.toString() = 'in')]String [parse(ppp.name)/][/if][/for]);
[/for] [comment operation/]
}
[/for] [comment interface/]
[/file]
[/for] [comment port/ ]
[/for] [comment participantes/]

[/template]

