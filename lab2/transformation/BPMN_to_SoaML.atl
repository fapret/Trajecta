-- @path SoaML=/tmde04/lab2/metamodels/SoaML.ecore
-- @path BPMN=/tmde04/lab2/metamodels/BPMN.ecore

module BPMN_to_SoaML;
create OUT: SoaML from IN: BPMN;

rule model2model {
	from
		m1 : BPMN!BPMN
	to
		m2 : SoaML!Model (
			participant <- m1.collaboration.process->collect(a | thisModule.resolveTemp(a, 'part')),
			participant <- m1.process->collect(a | thisModule.resolveTemp(a, 'part')),
			interface <- m1.collaboration.process->collect(p | p.lane->collect(a | a.flowObject->select(b | b.oclIsKindOf(BPMN!InteractionNode))->collect(d | d.messageflow->collect(e | thisModule.resolveTemp(e, 'i'))))),
			interface <- m1.process->collect(p | p.lane->collect(a | a.flowObject->select(b | b.oclIsKindOf(BPMN!InteractionNode))->collect(d | d.messageflow->collect(e | thisModule.resolveTemp(e, 'i')))))
		)
}

rule process2participant {
	from
		p : BPMN!Process
	to
		part : SoaML!Participant (
			name <- p.titulo,
			port <- p.lane->collect(a | a.flowObject->select(c | c.oclIsKindOf(BPMN!InteractionNode))->select(d | d.oclIsKindOf(BPMN!Task))->select(type | type.tipo = #Automatica)->collect(d | d.messageflow->collect(e | thisModule.resolveTemp(e, 'serv'))))
		)
}

rule task2autoTask {
	from
		m : BPMN!MessageFlow (
			m.interactionNode.first().oclIsKindOf(BPMN!Task) and m.interactionNode.last().oclIsKindOf(BPMN!Task) and
			m.interactionNode.last().tipo = #Automatica
		)
	to
		i : SoaML!Provider (
			name <- m.interactionNode.last().nombre,
			operation <- o
		),
		o : SoaML!Operation (
			visibility <- #public,
			name <- m.interactionNode.last().nombre + 'OperationReceive',
			parameter <- Sequence{pin, pout}
		),
		pin : SoaML!Parameter (
			name <- m.interactionNode.last().nombre + 'ParameterIn',
			messagetype <- msg
		),
		pout : SoaML!Parameter (
			name <- m.interactionNode.last().nombre + 'ParameterOut',
			messagetype <- msg2,
			direction <- #out
		),
		msg : SoaML!MessageType (
			name <- m.interactionNode.last().nombre + 'Message'
		),
		msg2 : SoaML!MessageType (
			name <- m.interactionNode.last().nombre + 'Message'
		),
		serv : SoaML!Service (
			name <- m.interactionNode.last().nombre,
			interface <- i
		)
}